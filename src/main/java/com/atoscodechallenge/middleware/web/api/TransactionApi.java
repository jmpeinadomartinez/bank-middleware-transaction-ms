/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.atoscodechallenge.middleware.web.api;

import com.atoscodechallenge.middleware.web.api.model.ApiError;
import com.atoscodechallenge.middleware.web.api.model.NewTransactionRequest;
import com.atoscodechallenge.middleware.web.api.model.NewTransactionResponse;
import com.atoscodechallenge.middleware.web.api.model.TransactionListResponse;
import com.atoscodechallenge.middleware.web.api.model.TransactionStatusRequest;
import com.atoscodechallenge.middleware.web.api.model.TransactionStatusResponse;

import io.swagger.annotations.*;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-06-12T15:53:33.899+02:00")

@Api(value = "transaction", description = "the transaction API")
public interface TransactionApi {

    @ApiOperation(value = "New transaction", notes = "", response = NewTransactionResponse.class, tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "New transaction response", response = NewTransactionResponse.class),
        @ApiResponse(code = 400, message = "InvalidqueryParameter", response = ApiError.class),
        @ApiResponse(code = 500, message = "Server error", response = ApiError.class) })
    
    @RequestMapping(value = "/transaction",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<NewTransactionResponse> newTransaction(@ApiParam(value = "Payload to new transaction" ,required=true )  @Valid @RequestBody NewTransactionRequest newTransactionRequest){
    	return new ResponseEntity<NewTransactionResponse>(HttpStatus.OK);
    }


    @ApiOperation(value = "Get transaction saved for an iban sort by amount ascending|descending", notes = "", response = TransactionListResponse.class, tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Search transaction response", response = TransactionListResponse.class),
        @ApiResponse(code = 400, message = "InvalidqueryParameter", response = ApiError.class),
        @ApiResponse(code = 500, message = "Server error", response = ApiError.class) })
    
    @RequestMapping(value = "/transaction/{iban}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TransactionListResponse> searchTransaction(@ApiParam(value = "iban account",required=true ) @PathVariable("iban") String iban, @NotNull@ApiParam(value = "Sort amount", required = true, allowableValues = "ascending, descending") @RequestParam(value = "sort", required = true) String sort, @ApiParam(value = "page number", required = false) @RequestParam(value = "page", required = false) Integer page, @ApiParam(value = "size page", required = false) @RequestParam(value = "size", required = false) Integer size){
    	return new ResponseEntity<TransactionListResponse>(HttpStatus.OK);
    }


    @ApiOperation(value = "Get transaction status for a reference", notes = "", response = TransactionStatusResponse.class, tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Search transaction response", response = TransactionStatusResponse.class),
        @ApiResponse(code = 400, message = "InvalidqueryParameter", response = ApiError.class),
        @ApiResponse(code = 500, message = "Server error", response = ApiError.class) })
    
    @RequestMapping(value = "/transaction/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TransactionStatusResponse> transactionStatus(@ApiParam(value = "Payload to get status transaction" ,required=true )  @Valid @RequestBody TransactionStatusRequest transactionStatusRequest){
    	return new ResponseEntity<TransactionStatusResponse>(HttpStatus.OK);
    }
}
